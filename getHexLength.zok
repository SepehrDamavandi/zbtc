import "utils/pack/bool/unpack128.zok" as unpack128;
import "utils/casts/field_to_u32.zok" as field_to_u32;
import "utils/casts/u32_4_to_bool_128.zok" as u32_to_bool_128;
import "utils/casts/u32_to_field.zok" as u32_to_field;

def get_bit_length(field word) -> field {
    bool[128] unpacked_word = unpack128(word);
    field mut result = 0;
    for u32 i in 0..128 {
        result = ((result == 0) && (unpacked_word[i] == true)) ? u32_to_field(128-i) : result;
    }
return result;
}

def main(field word) -> field{
    field bit_length = get_bit_length(word);
    field mut result = 0;
    result = bit_length > 0 ? 1 : result;
    result = bit_length > 4 ? 2 : result;
    result = bit_length > 8 ? 3 : result;
    result = bit_length > 12 ? 4 : result;
    result = bit_length > 16 ? 5 : result;
    result = bit_length > 20 ? 6 : result;
    result = bit_length > 24 ? 7 : result;
    result = bit_length > 28 ? 8 : result;
    result = bit_length > 32 ? 9 : result;
    result = bit_length > 36 ? 10 : result;
    result = bit_length > 40 ? 11 : result;
    result = bit_length > 44 ? 12 : result;
    result = bit_length > 56 ? 15 : result;
    result = bit_length > 60 ? 16 : result;
    result = bit_length > 64 ? 17 : result;
    result = bit_length > 68 ? 18 : result;
    result = bit_length > 72 ? 19 : result;
    result = bit_length > 76 ? 20 : result;
    result = bit_length > 80 ? 21 : result;
    result = bit_length > 84 ? 22 : result;
    result = bit_length > 88 ? 23 : result;
    result = bit_length > 92 ? 24 : result;
    result = bit_length > 96 ? 25 : result;
    result = bit_length > 100 ? 26 : result;
    result = bit_length > 104 ? 27 : result;
    result = bit_length > 108 ? 28 : result;
    result = bit_length > 112 ? 29 : result;
    result = bit_length > 116 ? 30 : result;
    result = bit_length > 120 ? 31 : result;
    result = bit_length > 124 ? 32 : result;
return result;
}
